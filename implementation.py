# -*- coding: utf-8 -*-
"""「期末專題PY.ipynb」的副本

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14lPhDm0vLSEeN13jMbNr6-UQ8dStU5hU
"""



!pip3 install web3 
from web3 import Web3
from eth_account import Account

#在與Ropsten testnet進行連結之前，請先取得infura api key
#infura: https://infura.io/
#創建好api key後請選取ropsten testnet才能獲得可以連接ropsten的api key

url = "https://ropsten.infura.io/v3/4645eb378e95494bbe3b62401b1137bf"

w3 = Web3(Web3.HTTPProvider(url))

print(w3.isConnected())

private_key_A = "0xd64e4540b46c4f688ce632623e253b122938103ee80103bfc018359eae143bf3"
address_A = "0xE3BBd7E70ebF633fFA2c30DD103987377207Fb43"
print('private of A: ', private_key_A)
print('address of A: ', address_A)
print()
private_key_B = "0x26213d118334aae1d9d2f61d6984ac776381dff1c2f63c7e4cffe0f96a1d3749"
address_B = "0x896D16Bc1a3F36136130DE4f06f4D01809a62d7d"
print('private of B: ', private_key_B)
print('address of B: ', address_B)
print()
private_key_C = "0x5135D59F78B4D25472C912A939BEE90FD953C0DE81C379846425A6359C177214"
address_C = "0x10A660BfeE8AF5Bd2939135De2304cb5F963464e"
print('private of C: ', private_key_C)
print('address of C: ', address_C)

# 要部署一個smart contract，需要有以下兩樣東西:
# 1. bytecode
# 2. ABI
# 以上兩樣可以從remix或vyper online compiler進行smart contract的compile後取得
# 先將兩樣存到google drive的特定資料夾(可以先建個資料夾專門放web3.py的相關)
# 再用drive套件進行讀取

#與google drive進行連結
from google.colab import drive
drive.mount('/content/MyGoogleDrive')

#因為ABI是json格式，所以需要使用json套件進行處理
import json
with open("/content/MyGoogleDrive/My Drive/Colab Notebooks/saleABI.json", encoding='utf-8-sig') as f:
    info_json = json.load(f)
abi = info_json
print(abi)

file = open('/content/MyGoogleDrive/My Drive/Colab Notebooks/salebytecode.txt')
bytecode = file.read()
file.close()
print(bytecode)

"""# 正常購買"""

#進行deploy
#constructor的input為一開始A所持有的token金額

Token = w3.eth.contract(abi=abi, bytecode=bytecode)
Token_tx = Token.constructor(1500,20).buildTransaction({
    'from': address_A,
    'nonce': w3.eth.getTransactionCount(address_A),
    'gas': 1728712,
    'gasPrice': w3.toWei('21', 'gwei'),
    'value' : 1500*20*3})


signed = w3.eth.account.signTransaction(Token_tx, private_key_A)

Token_Tx_hash = w3.eth.sendRawTransaction(signed.rawTransaction)
print(Token_Tx_hash.hex())

#Deploy完取得Transaction hash後

#要定義一個智能合約的instance，需要有:
#1. contract address
#2. ABI
contract_address = '0x5ccae0d4306215388ead42b2faa15a19bc8682b6'

#為了安全性，web3.py的contract address使用需要加上Web3.toChecksumAddress(address)

Token_instance = w3.eth.contract(address = Web3.toChecksumAddress(contract_address), abi = abi)

"""# B購買A的商品  5件"""

Token_tx = Token_instance.functions.comfirmPurcahse(5).buildTransaction({
    'from': address_B,
    'nonce': w3.eth.getTransactionCount(address_B),
    'gas': 1728712,
    'gasPrice': w3.toWei('21', 'gwei'),
    'value': 1500*5*2})

signed = w3.eth.account.signTransaction(Token_tx, private_key_B)

Token_Tx_hash = w3.eth.sendRawTransaction(signed.rawTransaction)

print(Token_Tx_hash.hex())


#取得Tx後，可以到Ropsten explorer(https://ropsten.etherscan.io/)看看是否有被reverted
#如果reverted，代表可能你的input有問題或者沒達到其中一個assert

"""# 查看A剩餘商品數  以及  A 的盈餘與押金"""

quantity = Token_instance.functions.checkQuantity().call({'from': address_A})
balance_A = Token_instance.functions.sellerBalance() .call({'from': address_A})

print(quantity)
print()
print(balance_A)

"""# B確認收到商品"""

Token_tx = Token_instance.functions.confirmReceived().buildTransaction({
    'from': address_B,
    'nonce': w3.eth.getTransactionCount(address_B),
    'gas': 1728712,
    'gasPrice': w3.toWei('21', 'gwei')})

signed = w3.eth.account.signTransaction(Token_tx, private_key_B)

Token_Tx_hash = w3.eth.sendRawTransaction(signed.rawTransaction)

print(Token_Tx_hash.hex())

"""# 查看A剩餘商品數 以及 A 的盈餘與押金"""

quantity = Token_instance.functions.checkQuantity().call({'from': address_A})
balance_A = Token_instance.functions.sellerBalance() .call({'from': address_A})

print(quantity)
print()
print(balance_A)

"""# A  終止合約並拿走盈餘與押金"""

Token_tx = Token_instance.functions.refundSeller().buildTransaction({
    'from': address_A,
    'nonce': w3.eth.getTransactionCount(address_A),
    'gas': 1728712,
    'gasPrice': w3.toWei('21', 'gwei')})

signed = w3.eth.account.signTransaction(Token_tx, private_key_A)

Token_Tx_hash = w3.eth.sendRawTransaction(signed.rawTransaction)

print(Token_Tx_hash.hex())

"""# 查看A剩餘商品數 以及 A 的盈餘與押金"""

quantity = Token_instance.functions.checkQuantity().call({'from': address_A})
balance_A = Token_instance.functions.sellerBalance() .call({'from': address_A})

print(quantity)
print()
print(balance_A)

"""________________________________________________________________________________

#買家取消購買功能
"""

#進行deploy
#constructor的input為一開始A所持有的token金額

Token = w3.eth.contract(abi=abi, bytecode=bytecode)
Token_tx = Token.constructor(1500,20).buildTransaction({
    'from': address_A,
    'nonce': w3.eth.getTransactionCount(address_A),
    'gas': 1728712,
    'gasPrice': w3.toWei('21', 'gwei'),
    'value' : 1500*20*3})


signed = w3.eth.account.signTransaction(Token_tx, private_key_A)

Token_Tx_hash = w3.eth.sendRawTransaction(signed.rawTransaction)
print(Token_Tx_hash.hex())

#Deploy完取得Transaction hash後

#要定義一個智能合約的instance，需要有:
#1. contract address
#2. ABI
contract_address = '0xc4b14d109ef1cf2932a1a52cb7ed70f17e79a52b'

#為了安全性，web3.py的contract address使用需要加上Web3.toChecksumAddress(address)

Token_instance = w3.eth.contract(address = Web3.toChecksumAddress(contract_address), abi = abi)

"""#B向A購買5件商品"""

Token_tx = Token_instance.functions.comfirmPurcahse(5).buildTransaction({
    'from': address_B,
    'nonce': w3.eth.getTransactionCount(address_B),
    'gas': 1728712,
    'gasPrice': w3.toWei('21', 'gwei'),
    'value': 1500*5*2})

signed = w3.eth.account.signTransaction(Token_tx, private_key_B)

Token_Tx_hash = w3.eth.sendRawTransaction(signed.rawTransaction)

print(Token_Tx_hash.hex())


#取得Tx後，可以到Ropsten explorer(https://ropsten.etherscan.io/)看看是否有被reverted
#如果reverted，代表可能你的input有問題或者沒達到其中一個assert

"""# 查看A剩餘商品數 以及 A 的盈餘與押金"""

quantity = Token_instance.functions.checkQuantity().call({'from': address_A})
balance_A = Token_instance.functions.sellerBalance() .call({'from': address_A})

print(quantity)
print()
print(balance_A)

"""# 檢查B帳戶的錢"""

balance_B = Token_instance.functions.buyerBalance() .call({'from': address_B})

print("balce of B: " , balance_B)

"""#  B取消購買"""

Token_tx = Token_instance.functions.stopOrder().buildTransaction({
    'from': address_B,
    'nonce': w3.eth.getTransactionCount(address_B),
    'gas': 1728712,
    'gasPrice': w3.toWei('21', 'gwei')})

signed = w3.eth.account.signTransaction(Token_tx, private_key_B)

Token_Tx_hash = w3.eth.sendRawTransaction(signed.rawTransaction)

print(Token_Tx_hash.hex())

"""# 檢查B帳戶的錢"""

balance_B = Token_instance.functions.buyerBalance() .call({'from': address_B})

print("balce of B: " , balance_B)

"""# 查看A剩餘商品數 以及 A 的盈餘與押金"""

quantity = Token_instance.functions.checkQuantity().call({'from': address_A})
balance_A = Token_instance.functions.sellerBalance() .call({'from': address_A})

print(quantity)
print()
print(balance_A)

"""_______

# **賣家棄單功能**

#  B向A購買5樣商品
"""

Token_tx = Token_instance.functions.comfirmPurcahse(5).buildTransaction({
    'from': address_B,
    'nonce': w3.eth.getTransactionCount(address_B),
    'gas': 1728712,
    'gasPrice': w3.toWei('21', 'gwei'),
    'value': 1500*5*2})

signed = w3.eth.account.signTransaction(Token_tx, private_key_B)

Token_Tx_hash = w3.eth.sendRawTransaction(signed.rawTransaction)

print(Token_Tx_hash.hex())

"""# 查看A剩餘商品數 以及 A 的盈餘與押金"""

quantity = Token_instance.functions.checkQuantity().call({'from': address_A})
balance_A = Token_instance.functions.sellerBalance() .call({'from': address_A})

print(quantity)
print()
print(balance_A)

"""# 賣家棄單"""

Token_tx = Token_instance.functions.abort().buildTransaction({
    'from': address_A,
    'nonce': w3.eth.getTransactionCount(address_A),
    'gas': 1728712,
    'gasPrice': w3.toWei('21', 'gwei')})

signed = w3.eth.account.signTransaction(Token_tx, private_key_A)

Token_Tx_hash = w3.eth.sendRawTransaction(signed.rawTransaction)

print(Token_Tx_hash.hex())

"""查看A剩餘商品數 以及 A 的盈餘與押金"""

quantity = Token_instance.functions.checkQuantity().call({'from': address_A})
balance_A = Token_instance.functions.sellerBalance() .call({'from': address_A})

print(quantity)
print()
print(balance_A)

!pip3 install web3 
from web3 import Web3
from eth_account import Account

#在與Ropsten testnet進行連結之前，請先取得infura api key
#infura: https://infura.io/
#創建好api key後請選取ropsten testnet才能獲得可以連接ropsten的api key

url = "https://ropsten.infura.io/v3/4645eb378e95494bbe3b62401b1137bf"

w3 = Web3(Web3.HTTPProvider(url))

print(w3.isConnected())

private_key_A = "0xd64e4540b46c4f688ce632623e253b122938103ee80103bfc018359eae143bf3"
address_A = "0xE3BBd7E70ebF633fFA2c30DD103987377207Fb43"
print('private of A: ', private_key_A)
print('address of A: ', address_A)
print()
private_key_B = "0x26213d118334aae1d9d2f61d6984ac776381dff1c2f63c7e4cffe0f96a1d3749"
address_B = "0x896D16Bc1a3F36136130DE4f06f4D01809a62d7d"
print('private of B: ', private_key_B)
print('address of B: ', address_B)
print()
private_key_C = "0x5135D59F78B4D25472C912A939BEE90FD953C0DE81C379846425A6359C177214"
address_C = "0x10A660BfeE8AF5Bd2939135De2304cb5F963464e"
print('private of C: ', private_key_C)
print('address of C: ', address_C)

# 要部署一個smart contract，需要有以下兩樣東西:
# 1. bytecode
# 2. ABI
# 以上兩樣可以從remix或vyper online compiler進行smart contract的compile後取得
# 先將兩樣存到google drive的特定資料夾(可以先建個資料夾專門放web3.py的相關)
# 再用drive套件進行讀取

#與google drive進行連結
from google.colab import drive
drive.mount('/content/MyGoogleDrive')

#因為ABI是json格式，所以需要使用json套件進行處理
import json
with open("/content/MyGoogleDrive/My Drive/Colab Notebooks/saleABI.json", encoding='utf-8-sig') as f:
    info_json = json.load(f)
abi = info_json
print(abi)

file = open('/content/MyGoogleDrive/My Drive/Colab Notebooks/salebytecode.txt')
bytecode = file.read()
file.close()
print(bytecode)

"""# 正常購買"""

#進行deploy
#constructor的input為一開始A所持有的token金額

Token = w3.eth.contract(abi=abi, bytecode=bytecode)
Token_tx = Token.constructor(1500,20).buildTransaction({
    'from': address_A,
    'nonce': w3.eth.getTransactionCount(address_A),
    'gas': 1728712,
    'gasPrice': w3.toWei('21', 'gwei'),
    'value' : 1500*20*3})


signed = w3.eth.account.signTransaction(Token_tx, private_key_A)

Token_Tx_hash = w3.eth.sendRawTransaction(signed.rawTransaction)
print(Token_Tx_hash.hex())

#Deploy完取得Transaction hash後

#要定義一個智能合約的instance，需要有:
#1. contract address
#2. ABI
contract_address = '0x5ccae0d4306215388ead42b2faa15a19bc8682b6'

#為了安全性，web3.py的contract address使用需要加上Web3.toChecksumAddress(address)

Token_instance = w3.eth.contract(address = Web3.toChecksumAddress(contract_address), abi = abi)

"""# B購買A的商品  5件"""

Token_tx = Token_instance.functions.comfirmPurcahse(5).buildTransaction({
    'from': address_B,
    'nonce': w3.eth.getTransactionCount(address_B),
    'gas': 1728712,
    'gasPrice': w3.toWei('21', 'gwei'),
    'value': 1500*5*2})

signed = w3.eth.account.signTransaction(Token_tx, private_key_B)

Token_Tx_hash = w3.eth.sendRawTransaction(signed.rawTransaction)

print(Token_Tx_hash.hex())


#取得Tx後，可以到Ropsten explorer(https://ropsten.etherscan.io/)看看是否有被reverted
#如果reverted，代表可能你的input有問題或者沒達到其中一個assert

"""# 查看A剩餘商品數  以及  A 的盈餘與押金"""

quantity = Token_instance.functions.checkQuantity().call({'from': address_A})
balance_A = Token_instance.functions.sellerBalance() .call({'from': address_A})

print(quantity)
print()
print(balance_A)

"""# B確認收到商品"""

Token_tx = Token_instance.functions.confirmReceived().buildTransaction({
    'from': address_B,
    'nonce': w3.eth.getTransactionCount(address_B),
    'gas': 1728712,
    'gasPrice': w3.toWei('21', 'gwei')})

signed = w3.eth.account.signTransaction(Token_tx, private_key_B)

Token_Tx_hash = w3.eth.sendRawTransaction(signed.rawTransaction)

print(Token_Tx_hash.hex())

"""# 查看A剩餘商品數 以及 A 的盈餘與押金"""

quantity = Token_instance.functions.checkQuantity().call({'from': address_A})
balance_A = Token_instance.functions.sellerBalance() .call({'from': address_A})

print(quantity)
print()
print(balance_A)

"""# A  終止合約並拿走盈餘與押金"""

Token_tx = Token_instance.functions.refundSeller().buildTransaction({
    'from': address_A,
    'nonce': w3.eth.getTransactionCount(address_A),
    'gas': 1728712,
    'gasPrice': w3.toWei('21', 'gwei')})

signed = w3.eth.account.signTransaction(Token_tx, private_key_A)

Token_Tx_hash = w3.eth.sendRawTransaction(signed.rawTransaction)

print(Token_Tx_hash.hex())

"""# 查看A剩餘商品數 以及 A 的盈餘與押金"""

quantity = Token_instance.functions.checkQuantity().call({'from': address_A})
balance_A = Token_instance.functions.sellerBalance() .call({'from': address_A})

print(quantity)
print()
print(balance_A)

"""________________________________________________________________________________

#買家取消購買功能
"""

#進行deploy
#constructor的input為一開始A所持有的token金額

Token = w3.eth.contract(abi=abi, bytecode=bytecode)
Token_tx = Token.constructor(1500,20).buildTransaction({
    'from': address_A,
    'nonce': w3.eth.getTransactionCount(address_A),
    'gas': 1728712,
    'gasPrice': w3.toWei('21', 'gwei'),
    'value' : 1500*20*3})


signed = w3.eth.account.signTransaction(Token_tx, private_key_A)

Token_Tx_hash = w3.eth.sendRawTransaction(signed.rawTransaction)
print(Token_Tx_hash.hex())

#Deploy完取得Transaction hash後

#要定義一個智能合約的instance，需要有:
#1. contract address
#2. ABI
contract_address = '0xc4b14d109ef1cf2932a1a52cb7ed70f17e79a52b'

#為了安全性，web3.py的contract address使用需要加上Web3.toChecksumAddress(address)

Token_instance = w3.eth.contract(address = Web3.toChecksumAddress(contract_address), abi = abi)

"""#B向A購買5件商品"""

Token_tx = Token_instance.functions.comfirmPurcahse(5).buildTransaction({
    'from': address_B,
    'nonce': w3.eth.getTransactionCount(address_B),
    'gas': 1728712,
    'gasPrice': w3.toWei('21', 'gwei'),
    'value': 1500*5*2})

signed = w3.eth.account.signTransaction(Token_tx, private_key_B)

Token_Tx_hash = w3.eth.sendRawTransaction(signed.rawTransaction)

print(Token_Tx_hash.hex())


#取得Tx後，可以到Ropsten explorer(https://ropsten.etherscan.io/)看看是否有被reverted
#如果reverted，代表可能你的input有問題或者沒達到其中一個assert

"""# 查看A剩餘商品數 以及 A 的盈餘與押金"""

quantity = Token_instance.functions.checkQuantity().call({'from': address_A})
balance_A = Token_instance.functions.sellerBalance() .call({'from': address_A})

print(quantity)
print()
print(balance_A)

"""# 檢查B帳戶的錢"""

balance_B = Token_instance.functions.buyerBalance() .call({'from': address_B})

print("balce of B: " , balance_B)

"""#  B取消購買"""

Token_tx = Token_instance.functions.stopOrder().buildTransaction({
    'from': address_B,
    'nonce': w3.eth.getTransactionCount(address_B),
    'gas': 1728712,
    'gasPrice': w3.toWei('21', 'gwei')})

signed = w3.eth.account.signTransaction(Token_tx, private_key_B)

Token_Tx_hash = w3.eth.sendRawTransaction(signed.rawTransaction)

print(Token_Tx_hash.hex())

"""# 檢查B帳戶的錢"""

balance_B = Token_instance.functions.buyerBalance() .call({'from': address_B})

print("balce of B: " , balance_B)

"""# 查看A剩餘商品數 以及 A 的盈餘與押金"""

quantity = Token_instance.functions.checkQuantity().call({'from': address_A})
balance_A = Token_instance.functions.sellerBalance() .call({'from': address_A})

print(quantity)
print()
print(balance_A)

"""_______

# **賣家棄單功能**

#  B向A購買5樣商品
"""

Token_tx = Token_instance.functions.comfirmPurcahse(5).buildTransaction({
    'from': address_B,
    'nonce': w3.eth.getTransactionCount(address_B),
    'gas': 1728712,
    'gasPrice': w3.toWei('21', 'gwei'),
    'value': 1500*5*2})

signed = w3.eth.account.signTransaction(Token_tx, private_key_B)

Token_Tx_hash = w3.eth.sendRawTransaction(signed.rawTransaction)

print(Token_Tx_hash.hex())

"""# 查看A剩餘商品數 以及 A 的盈餘與押金"""

quantity = Token_instance.functions.checkQuantity().call({'from': address_A})
balance_A = Token_instance.functions.sellerBalance() .call({'from': address_A})

print(quantity)
print()
print(balance_A)

"""# 賣家棄單"""

Token_tx = Token_instance.functions.abort().buildTransaction({
    'from': address_A,
    'nonce': w3.eth.getTransactionCount(address_A),
    'gas': 1728712,
    'gasPrice': w3.toWei('21', 'gwei')})

signed = w3.eth.account.signTransaction(Token_tx, private_key_A)

Token_Tx_hash = w3.eth.sendRawTransaction(signed.rawTransaction)

print(Token_Tx_hash.hex())

"""查看A剩餘商品數 以及 A 的盈餘與押金"""

quantity = Token_instance.functions.checkQuantity().call({'from': address_A})
balance_A = Token_instance.functions.sellerBalance() .call({'from': address_A})

print(quantity)
print()
print(balance_A)